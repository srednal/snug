// preamble cruft
import org.gradle.api.internal.file.FileResolver
import org.gradle.process.internal.DefaultJavaExecAction
import org.gradle.process.internal.JavaExecAction

import java.math.MathContext

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://oss.sonatype.org/content/groups/public" }
    }
    dependencies {
        classpath group: 'org.scoverage', name: 'gradle-scoverage', version: '1.0.8'
        classpath group: 'org.github.ngbinh.scalastyle', name: 'gradle-scalastyle-plugin_2.11', version: '0.7.2'
    }
}
buildscript.repositories.each { project.repositories.add(it) }

project.group = project.properties.projectGroup
project.version = project.properties.projectVersion

/////////////////////////////////////////////////////////////////////
// The main useful bits:

apply plugin: 'scala'
apply plugin: 'scalaStyle'
apply plugin: 'scoverage'

defaultTasks 'checkScoverage', 'scalaStyle'
task('default', dependsOn: defaultTasks, description: "Run defaultTasks: ${defaultTasks}")


dependencies {
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.7'
    compile group: 'org.scala-lang', name: 'scala-reflect', version: '2.11.7'
    compile group: 'org.scala-lang', name: 'scalap', version: '2.11.7'

    compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.3.11'
    compile group: 'com.typesafe', name: 'config', version: '1.3.0'

    compile group: 'com.typesafe.scala-logging', name: 'scala-logging_2.11', version: '3.1.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'

    testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'

    // test
    testCompile group: 'org.scalatest', name: "scalatest_2.11", version: '2.2.5'
    testCompile group: 'com.typesafe.akka', name: 'akka-testkit_2.11', version: '2.3.11'
    // pimpFuture
    testCompile group: 'io.spray', name: 'spray-util_2.11', version: '1.3.3'

    testCompile group: 'org.scalamock', name: 'scalamock-scalatest-support_2.11', version: '3.2.2'
    testRuntime group: 'org.pegdown', name: 'pegdown', version: '1.5.0'

    scoverage group: 'org.scoverage', name: 'scalac-scoverage-plugin_2.11', version: '1.1.0'
    scoverage group: 'org.scoverage', name: 'scalac-scoverage-runtime_2.11', version: '1.1.0'
    // current scoverage version needs to also be in compile to build macros  (?)
    testCompile group: 'org.scoverage', name: 'scalac-scoverage-runtime_2.11', version: '1.1.0'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false  // Zinc
    scalaCompileOptions.deprecation = true
    scalaCompileOptions.unchecked = true
    scalaCompileOptions.additionalParameters = ['-feature', '-Xlint', '-Xfatal-warnings'] // , '-Ymacro-debug-lite']
}

scalaStyle {
    configLocation = 'scalastyle_config.xml'
    includeTestSourceDirectory = true
    failOnWarning = true
    source = 'src/main/scala'
    testSource = 'src/test/scala'
}

checkScoverage {
    // actually, it's statement coverage now with scoverage but the property is still named line rate
    minimumLineRate = 0.85
}

////////////////////////////////////////////////////////////////
// Test cruft

task('scalatest', type: Test)
test.dependsOn scalatest

setupTest(scalatest)
setupTest(testScoverage)

def setupTest(Test t) {
    t.systemProperties['java.awt.headless'] = 'true'
    t.maxParallelForks = Runtime.runtime.availableProcessors()

    t << {
        // Based on com.github.maiflai:gradle-scalatest:0.5 but copied to gain control over scalatest options
        FileResolver fileResolver = t.getServices().get(FileResolver.class)

        JavaExecAction javaExecHandleBuilder = new DefaultJavaExecAction(fileResolver)
        javaExecHandleBuilder.setMain('org.scalatest.tools.Runner')
        javaExecHandleBuilder.setJvmArgs(t.allJvmArgs)
        javaExecHandleBuilder.setClasspath(t.classpath)

        List<String> args = new ArrayList<String>()
        args.add('-oSTD')
        args.add("-PS${maxParallelForks}".toString())
        args.addAll(['-R', t.testClassesDir.absolutePath])

        if (t.reports.junitXml.enabled) args.addAll(['-u', t.reports.junitXml.entryPoint.absolutePath])

        if (t.reports.html.enabled) {
            def dest = t.reports.html.destination
            dest.mkdirs()
            args.addAll(['-h', dest.absolutePath])
        }

        // Run a single test with -Dtest=com.srednal.snug.FooTest
        if (System.properties['test']) args.addAll(['-s', System.getProperty('test')])

        javaExecHandleBuilder.setArgs(args)
        javaExecHandleBuilder.execute()
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task == scalatest || task == testScoverage) {
        def dir = task.reports.html.destination.path - "$project.projectDir.path/"
        out.println("Test report: open $dir/index.html")
    }
    if (task == testScoverage) {
        // make the path relative
        def dir = scoverage.reportDir.path - "$project.projectDir.path/"
        println("Coverage report: open $dir/index.html")
    }
    if (task == checkScoverage) {
        def xml = checkScoverage.parser.parse(checkScoverage.cobertura)
        def coveragePct = new BigDecimal(xml.attribute('line-rate')).multiply(100).round(new MathContext(3))
        println("Code coverage: $coveragePct%")
    }
}

//////////////////////////////////////////////////////////

wrapper {
    gradleVersion = '2.5'
}
